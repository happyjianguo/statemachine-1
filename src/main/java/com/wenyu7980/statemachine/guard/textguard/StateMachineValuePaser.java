/* Generated By:JavaCC: Do not edit this line. StateMachineValuePaser.java */
package com.wenyu7980.statemachine.guard.textguard;

import java.lang.reflect.Field;
import java.math.BigDecimal;

public class StateMachineValuePaser implements StateMachineValuePaserConstants {

/** �?小的符号 */
  final public Object primary(Object data, Object value) throws ParseException {
  Object obj = null;
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      // 变量
          obj = variable(data, value);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      String str = t.toString();
      obj = str.substring(1, str.length() - 1);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      obj = new BigDecimal(t.toString());
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

/** 单元运算�? */
  final public Object unary(Object data, Object value) throws ParseException {
  Token t = null;
  Object obj = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      obj = express(data, value);
      obj = !((Boolean) obj);
      break;
    case 15:
      jj_consume_token(15);
      obj = primary(data, value);
      obj = ((BigDecimal) obj).multiply(new BigDecimal(- 1));
      break;
    case 16:
      jj_consume_token(16);
      obj = express(data, value);
      jj_consume_token(17);
      break;
    case NUMBER:
    case STRING:
    case IDENTIFIER:
      obj = primary(data, value);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

/** 基础term */
  final public Object term(Object data, Object value) throws ParseException {
  Object obj = null;
  Token t = null;
    obj = unary(data, value);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

/** 乘除 */
  final public Object multiDiv(Object data, Object value) throws ParseException {
  Token t = null;
  Object left = null;
  Object right = null;
    left = term(data, value);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 19:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        jj_consume_token(18);
        right = term(data, value);
      left = ((BigDecimal) left).multiply((BigDecimal) right);
        break;
      case 19:
        jj_consume_token(19);
        right = term(data, value);
      left = ((BigDecimal) left).divide((BigDecimal) right);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/** 加减 */
  final public Object plusMinus(Object data, Object value) throws ParseException {
  Token t = null;
  Object left = null;
  Object right = null;
    left = multiDiv(data, value);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
      case 20:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
        right = multiDiv(data, value);
      left = ((BigDecimal) left).add((BigDecimal) right);
        break;
      case 15:
        jj_consume_token(15);
        right = multiDiv(data, value);
      left = ((BigDecimal) left).subtract((BigDecimal) right);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/** 比较运算 */
  final public Object compare(Object data, Object value) throws ParseException {
  Object left = null;
  Object right = null;
    left = plusMinus(data, value);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        right = plusMinus(data, value);
      if (left instanceof BigDecimal){
          {if (true) return ((Comparable) left).compareTo(right) != 0;}
      }
      {if (true) return !java.util.Objects.equals(left,right);}
        break;
      case 22:
        jj_consume_token(22);
        right = plusMinus(data, value);
      {if (true) return ((Comparable) left).compareTo(right) > 0;}
        break;
      case 23:
        jj_consume_token(23);
        right = plusMinus(data, value);
      {if (true) return ((Comparable) left).compareTo(right) < 0;}
        break;
      case 24:
        jj_consume_token(24);
        right = plusMinus(data, value);
      if (left instanceof BigDecimal){
        {if (true) return ((Comparable) left).compareTo(right) == 0;}
      }
      {if (true) return java.util.Objects.equals(left,right);}
        break;
      case 25:
        jj_consume_token(25);
        right = plusMinus(data, value);
      {if (true) return ((Comparable) left).compareTo(right) >= 0;}
        break;
      case 26:
        jj_consume_token(26);
        right = plusMinus(data, value);
      {if (true) return ((Comparable) left).compareTo(right) <= 0;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/** AND */
  final public Object andExpr(Object data, Object value) throws ParseException {
  Object left = null;
  Object right = null;
    left = compare(data, value);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(27);
      right = compare(data, value);
      left = ((Boolean) left) && ((Boolean) right);
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/** OR */
  final public Object orExpr(Object data, Object value) throws ParseException {
  Object left = null;
  Object right = null;
    left = andExpr(data, value);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(28);
      right = andExpr(data, value);
      left = ((Boolean) left) || ((Boolean) right);
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/** 表达�? */
  final public Object express(Object data, Object value) throws ParseException {
  Token t;
  Object left = null;
  Object mid = null;
  Object right = null;
    left = orExpr(data, value);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      mid = express(data, value);
      jj_consume_token(30);
      right = express(data, value);
        left = ((Boolean) left) ? mid : right;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/** 属�?�变�? */
  final public Object variable(Object data, Object value) throws ParseException {
  Token t;
  Field field = null;
  Object obj = null;
    t = jj_consume_token(IDENTIFIER);
      try
      {
        if ("#".equals(t.toString()))
        {
          obj = data;
        }
        else if ("$".equals(t.toString()))
        {
          obj = value;
        }
        else if("null".equals(t.toString()))
        {
          obj = null;
        }
        else
        {
          {if (true) throw new TextGuardException(t.toString());}
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
        {if (true) throw new TextGuardException(data.getClass().toString());}
      }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      jj_consume_token(31);
      t = jj_consume_token(IDENTIFIER);
        try
        {
          field = obj.getClass().getDeclaredField(t.toString());
          field.setAccessible(true);
          if (field.getType().isEnum())
          {
            obj = field.get(obj).toString();
          }
          else
          {
            obj = field.get(obj);
          }
        }
        catch (Exception e)
        {
          e.printStackTrace();
          {if (true) throw new TextGuardException(data.getClass().toString());}
        }
    }
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

/** 语句 */
  final public Object statement(Object data, Object value) throws ParseException {
  Object obj = null;
    obj = express(data, value);
    jj_consume_token(32);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public StateMachineValuePaserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1820,0x1d820,0xc0000,0xc0000,0x108000,0x108000,0x7e00000,0x7e00000,0x8000000,0x10000000,0x20000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public StateMachineValuePaser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StateMachineValuePaser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StateMachineValuePaserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public StateMachineValuePaser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StateMachineValuePaserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public StateMachineValuePaser(StateMachineValuePaserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(StateMachineValuePaserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
